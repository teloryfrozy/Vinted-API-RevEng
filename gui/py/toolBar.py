# Form implementation generated from reading ui file 'toolBar.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtWidgets, QtGui
from engine import print_msg_sheet


def setup_menubar(actual, primary):
    """Creates the menu bar"""
    from sys import path
    path.append('program')
    from connectionVinted import Ui_ConnectionVinted
    from connectionGoogle import Ui_ConnectionGoogle


    actual.menubar = QtWidgets.QMenuBar(parent=primary.MainWindow)
    actual.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 22))
    actual.menuLanguages = QtWidgets.QMenu(parent=actual.menubar)
    actual.menuConnections = QtWidgets.QMenu(parent=actual.menubar)
    primary.MainWindow.setMenuBar(actual.menubar)

    # === Engine mechanicsms === #
    actual.setFrench = QtGui.QAction(parent=primary.MainWindow)
    actual.setEnglish = QtGui.QAction(parent=primary.MainWindow)
    actual.setSpanish = QtGui.QAction(parent=primary.MainWindow)
    actual.setGerman = QtGui.QAction(parent=primary.MainWindow)
    actual.connectionGoogle = QtGui.QAction(parent=primary.MainWindow)
    actual.connectionVinted = QtGui.QAction(parent=primary.MainWindow)

    # --- Assign mechanisms --- #
    actual.menuLanguages.addAction(actual.setEnglish)
    actual.menuLanguages.addAction(actual.setFrench)
    actual.menuLanguages.addAction(actual.setSpanish)
    actual.menuLanguages.addAction(actual.setGerman)
    actual.menuConnections.addAction(actual.connectionGoogle)
    actual.menuConnections.addAction(actual.connectionVinted)
    # link functions to buttons
    actual.connectionVinted.triggered.connect(lambda:primary.set_page(Ui_ConnectionVinted()))
    actual.connectionGoogle.triggered.connect(lambda:primary.set_page(Ui_ConnectionGoogle()))
    actual.setFrench.triggered.connect(lambda:update_toolbar_text(primary, "fr"))
    actual.setEnglish.triggered.connect(lambda:update_toolbar_text(primary, "en"))
    actual.setSpanish.triggered.connect(lambda:update_toolbar_text(primary, "es"))
    actual.setGerman.triggered.connect(lambda:update_toolbar_text(primary, "de"))
    actual.menubar.addAction(actual.menuLanguages.menuAction())
    actual.menubar.addAction(actual.menuConnections.menuAction())
                
    # --- Menu Bar text --- #
    actual.connectionGoogle.setText("Google")
    actual.connectionVinted.setText("Vinted")
    # --- Menu Bar text --- #
    actual.menuLanguages.setTitle(primary.lang_file.get_page_text("toolbar", "languages"))
    actual.menuConnections.setTitle(primary.lang_file.get_page_text("toolbar", "connections"))
    # languages
    actual.setFrench.setText(primary.lang_file.get_toolbar_text("sub_menu", "fr"))
    actual.setEnglish.setText(primary.lang_file.get_toolbar_text("sub_menu", "en"))
    actual.setSpanish.setText(primary.lang_file.get_toolbar_text("sub_menu", "es"))
    actual.setGerman.setText(primary.lang_file.get_toolbar_text("sub_menu", "de"))
    
def setup_toolbar(actual, primary):
    """Creates the toolbar"""
    try:
        return primary.MainWindow.menu_bar_created
    except:
        # note that the menu bar has been created
        primary.MainWindow.menu_bar_created = True

    # Import modules when needed to avoid circular issues    
    from reposting import Ui_reposting
    from accueil import Ui_windowAccueil
    from photoShoot import Ui_PhotoShoot
    from Information import Ui_Information
    from settings import Ui_Settings
    
    # icon path
    icon_path = "gui/icons/"
    actual.toolBar = QtWidgets.QToolBar(parent=primary.MainWindow)
    primary.MainWindow.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, actual.toolBar)
    # access to settings
    actual.buttonSettings = QtGui.QAction(parent=primary.MainWindow)
    icon = QtGui.QIcon()
    icon.addPixmap(QtGui.QPixmap(f"{icon_path}gear--v2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
    actual.buttonSettings.setIcon(icon)
    # access to photo shoot
    actual.buttonCamera = QtGui.QAction(parent=primary.MainWindow)
    icon1 = QtGui.QIcon()
    icon1.addPixmap(QtGui.QPixmap(f"{icon_path}photo.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
    actual.buttonCamera.setIcon(icon1)
    # undo the previous action
    actual.actionRetour = QtGui.QAction(parent=primary.MainWindow)
    icon2 = QtGui.QIcon()
    icon2.addPixmap(QtGui.QPixmap(f"{icon_path}undo.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
    actual.actionRetour.setIcon(icon2)
    # access to the home menu
    actual.actionHome = QtGui.QAction(parent=primary.MainWindow)
    icon3 = QtGui.QIcon()
    icon3.addPixmap(QtGui.QPixmap(f"{icon_path}home.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
    actual.actionHome.setIcon(icon3)
    # redo the previous action
    actual.actionRedo = QtGui.QAction(parent=primary.MainWindow)
    icon4 = QtGui.QIcon()
    icon4.addPixmap(QtGui.QPixmap(f"{icon_path}redo.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
    actual.actionRedo.setIcon(icon4)
    # check the infos of the app
    actual.actionInformations = QtGui.QAction(parent=primary.MainWindow)
    icon5 = QtGui.QIcon()
    icon5.addPixmap(QtGui.QPixmap(f"{icon_path}info-center.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
    actual.actionInformations.setIcon(icon5)
    # send notifications to vinties
    actual.actionNotification = QtGui.QAction(parent=primary.MainWindow)
    icon7 = QtGui.QIcon()
    icon7.addPixmap(QtGui.QPixmap(f"{icon_path}notification.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
    actual.actionNotification.setIcon(icon7)
    # print thank message sheet
    actual.actionPrintMsgSheet = QtGui.QAction(parent=primary.MainWindow)
    icon8 = QtGui.QIcon()
    icon8.addPixmap(QtGui.QPixmap(f"{icon_path}printer.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
    actual.actionPrintMsgSheet.setIcon(icon8)
    # access to the database of ads
    actual.actionMenuAdUpload = QtGui.QAction(parent=primary.MainWindow)
    icon9 = QtGui.QIcon()
    icon9.addPixmap(QtGui.QPixmap(f"{icon_path}post_ad.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
    actual.actionMenuAdUpload.setIcon(icon9)
    
    
    # attach the element on the toolbar
    actual.toolBar.addAction(actual.actionRetour)
    actual.toolBar.addAction(actual.actionRedo)
    actual.toolBar.addAction(actual.actionHome)
    actual.toolBar.addAction(actual.buttonSettings)
    actual.toolBar.addAction(actual.buttonCamera)
    actual.toolBar.addAction(actual.actionInformations)
    actual.toolBar.addAction(actual.actionNotification)
    actual.toolBar.addAction(actual.actionPrintMsgSheet)
    actual.toolBar.addAction(actual.actionMenuAdUpload)

    # --- Assign mechanisms to the toolbar --- #
    actual.actionRetour.triggered.connect(lambda:primary.undo())
    actual.actionRedo.triggered.connect(lambda:primary.redo())
    actual.actionHome.triggered.connect(lambda:primary.set_page(Ui_windowAccueil()))
    actual.buttonSettings.triggered.connect(lambda:primary.set_page(Ui_Settings()))    
    actual.buttonCamera.triggered.connect(lambda:primary.set_page(Ui_PhotoShoot()))
    actual.actionInformations.triggered.connect(lambda:primary.set_page(Ui_Information()))
    actual.actionNotification.triggered.connect(lambda:send_notifications(primary))
    actual.actionPrintMsgSheet.triggered.connect(lambda:print_msg_sheet())
    actual.actionMenuAdUpload.triggered.connect(lambda:primary.set_page(Ui_reposting()))

    # --- Tool Bar text --- #
    actual.buttonSettings.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "settings"))
    actual.buttonCamera.setToolTip("Photo Shoot")
    actual.actionRetour.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "undo"))
    actual.actionRedo.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "redo"))
    actual.actionHome.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "home"))
    actual.actionInformations.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "informations"))
    actual.actionNotification.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "send_nofications"))
    actual.actionPrintMsgSheet.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "print_sheet"))
    actual.actionMenuAdUpload.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "upload_menu"))

def update_toolbar_text(primary, lang):
    """Updates the toolbar text
    
    Args:
        - primary: main window
        - lang: new lang
    """
    # update the accessors of classes
    primary.set_lang(lang)
    # --- Tool Bar text --- #
    primary.buttonSettings.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "settings"))
    primary.actionRetour.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "undo"))
    primary.actionRedo.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "redo"))
    primary.actionHome.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "home"))
    primary.actionInformations.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "informations"))    
    primary.actionNotification.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "send_nofications"))
    primary.actionPrintMsgSheet.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "print_sheet"))
    primary.actionMenuAdUpload.setToolTip(primary.lang_file.get_toolbar_text("tooltips", "upload_menu"))

def send_notifications(primary):
    if primary.not_co_vinted():
        return
    try:
        primary.vinted_api.send_notifications()
    except:
        primary.vinted_api.token_expired()
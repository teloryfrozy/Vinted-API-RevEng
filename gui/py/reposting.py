# Form implementation generated from reading ui file 'Reposting.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from os import listdir, path
from tkinter import messagebox
from PyQt6 import QtCore, QtGui, QtWidgets
from engine import File


class CustomTextEdit(QtWidgets.QTextEdit):

    def __init__(self, parent):
        super().__init__(parent)

    def keyPressEvent(self, event):
        if len(self.toPlainText()) >= 50 or event.key() == QtCore.Qt.Key.Key_Return or event.key() == QtCore.Qt.Key.Key_Enter:
            event.ignore()
        else:
            super().keyPressEvent(event)

    def focusInEvent(self, event):
        super().focusInEvent(event)
        QtCore.QTimer.singleShot(0, self.selectAll)

class Ui_reposting(object):

    def setupUi(self, primary):
        # Constant
        self.article_dir = "products/database/"
        self.tag_list = []

        self.centralwidget = QtWidgets.QWidget(parent=primary.MainWindow)
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.frame = QtWidgets.QFrame(parent=self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.gridLayout_3 = QtWidgets.QGridLayout(self.frame)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.textEdit = CustomTextEdit(parent=self.frame)
        self.textEdit.setMinimumSize(QtCore.QSize(300, 0))
        self.textEdit.setMaximumSize(QtCore.QSize(400, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.textEdit.setFont(font)
        self.textEdit.setAutoFillBackground(False)
        self.textEdit.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.textEdit.setOverwriteMode(False)
        self.horizontalLayout.addWidget(self.textEdit)
        self.sortButton = QtWidgets.QPushButton(parent=self.frame)
        self.sortButton.setMinimumSize(QtCore.QSize(80, 0))
        self.sortButton.setMaximumSize(QtCore.QSize(80, 40))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.sortButton.setFont(font)
        self.horizontalLayout.addWidget(self.sortButton)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.comboBox = QtWidgets.QComboBox(parent=self.frame)
        self.comboBox.setMinimumSize(QtCore.QSize(540, 40))
        self.comboBox.setMaximumSize(QtCore.QSize(600, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.comboBox.setFont(font)
        self.comboBox.addItem("")
        self.verticalLayout.addWidget(self.comboBox, 0, QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignVCenter)
        spacerItem = QtWidgets.QSpacerItem(650, 10, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.verticalLayout.addItem(spacerItem)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()

        # Displays the article preview
        self.article_img = QtWidgets.QLabel(parent=self.frame)
        self.article_img.setMinimumSize(QtCore.QSize(540, 300))
        self.article_img.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(17)
        self.article_img.setFont(font)
        self.article_img.setText(primary.lang_file.get_page_text("reposting_page", "no_art_slt"))
        self.horizontalLayout_2.addWidget(self.article_img, alignment=QtCore.Qt.AlignmentFlag.AlignCenter)

        self.verticalLayout.addLayout(self.horizontalLayout_2)        
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        spacerItem1 = QtWidgets.QSpacerItem(100, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.post_btn = QtWidgets.QPushButton(parent=self.frame)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)        
        self.post_btn.setFont(font)
        self.horizontalLayout_3.addWidget(self.post_btn)
        spacerItem2 = QtWidgets.QSpacerItem(100, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.gridLayout_3.addLayout(self.verticalLayout, 0, 2, 1, 1)
        self.gridLayout_4 = QtWidgets.QGridLayout()
        spacerItem3 = QtWidgets.QSpacerItem(20, 50, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_4.addItem(spacerItem3, 10, 0, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(10, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_4.addItem(spacerItem4, 2, 0, 1, 1)
        self.tagButton = QtWidgets.QRadioButton(parent=self.frame)
        self.tagButton.setMaximumSize(QtCore.QSize(300, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.tagButton.setFont(font)
        self.gridLayout_4.addWidget(self.tagButton, 5, 0, 1, 1)
        self.titleButton = QtWidgets.QRadioButton(parent=self.frame)
        self.titleButton.setMaximumSize(QtCore.QSize(300, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.titleButton.setFont(font)
        self.titleButton.setChecked(True)
        self.gridLayout_4.addWidget(self.titleButton, 4, 0, 1, 1)
        self.label = QtWidgets.QLabel(parent=self.frame)
        self.label.setMinimumSize(QtCore.QSize(300, 80))
        self.label.setMaximumSize(QtCore.QSize(300, 16777215))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.gridLayout_4.addWidget(self.label, 1, 0, 1, 1)
        self.textBrowser = QtWidgets.QTextBrowser(parent=self.frame)
        self.textBrowser.setMaximumSize(QtCore.QSize(300, 16777215))
        font = QtGui.QFont()
        font.setKerning(True)
        self.textBrowser.setFont(font)
        self.textBrowser.setStyleSheet("background-color: rgb(240, 240, 240);")
        self.textBrowser.setFrameShape(QtWidgets.QFrame.Shape.NoFrame)
        self.textBrowser.setLineWidth(0)
        self.gridLayout_4.addWidget(self.textBrowser, 10, 0, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(30, 10, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_4.addItem(spacerItem5, 6, 0, 1, 1)
        self.add_tag_btn = QtWidgets.QPushButton(parent=self.frame)
        self.add_tag_btn.setMaximumSize(QtCore.QSize(300, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setWeight(75)
        self.add_tag_btn.setFont(font)
        self.gridLayout_4.addWidget(self.add_tag_btn, 7, 0, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(30, 50, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        self.gridLayout_4.addItem(spacerItem6, 0, 0, 1, 1)
        self.rst_tag_btn = QtWidgets.QPushButton(parent=self.frame)
        self.rst_tag_btn.setMaximumSize(QtCore.QSize(300, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setWeight(75)
        self.rst_tag_btn.setFont(font)
        self.gridLayout_4.addWidget(self.rst_tag_btn, 8, 0, 1, 1)
        self.gridLayout_3.addLayout(self.gridLayout_4, 0, 0, 1, 1)
        self.add_to_queue_btn = QtWidgets.QPushButton(parent=self.frame)
        self.add_to_queue_btn.setMaximumSize(QtCore.QSize(300, 16777215))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setWeight(75)
        self.add_to_queue_btn.setFont(font)
        self.gridLayout_4.addWidget(self.add_to_queue_btn, 9, 0, 1, 1)
        self.line = QtWidgets.QFrame(parent=self.frame)
        self.line.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.line.setLineWidth(2)
        self.line.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.gridLayout_3.addWidget(self.line, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        primary.MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=primary.MainWindow)
        primary.MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(primary)
        QtCore.QMetaObject.connectSlotsByName(primary.MainWindow)

        # Mechanisms
        self.sortButton.clicked.connect(lambda:self.sort_articles(primary))
        self.comboBox.currentIndexChanged.connect(lambda:self.set_preview(self.comboBox.currentText(), primary))
        self.add_tag_btn.clicked.connect(lambda:self.add_tag(primary))
        self.rst_tag_btn.clicked.connect(lambda:self.reset_tag_list())
        self.post_btn.clicked.connect(lambda:self.post_article(primary))
        self.queue = []
        self.add_to_queue_btn.clicked.connect(lambda:self.add_to_queue(primary))

    def retranslateUi(self, primary):
        self.add_to_queue_btn.setToolTip("Votre file d'attente est vide")
        self.add_to_queue_btn.setText(primary.lang_file.get_page_text("reposting_page", "add_to_queue"))
        self.rst_tag_btn.setText(primary.lang_file.get_page_text("reposting_page", "rst_tags"))
        self.sortButton.setText(primary.lang_file.get_page_text("reposting_page", "sort"))
        self.comboBox.setItemText(0, primary.lang_file.get_page_text("reposting_page", "no_item_found"))
        self.post_btn.setText(primary.lang_file.get_page_text("reposting_page", "post_btn"))
        self.tagButton.setText(primary.lang_file.get_page_text("reposting_page", "tag"))
        self.titleButton.setText(primary.lang_file.get_page_text("reposting_page", "title"))
        self.label.setText(primary.lang_file.get_page_text("reposting_page", "search_by"))
        access_db_repost = primary.lang_file.get_page_text("reposting_page", "access_db_repost")
        research_items = primary.lang_file.get_page_text("reposting_page", "research_items")
        self.textBrowser.setHtml("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt;\">⏩ {access_db_repost}</span></p>\n"
f"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:10pt;\">🏷️ {research_items}</span></p></body></html>")
        self.add_tag_btn.setText(primary.lang_file.get_page_text("reposting_page", "add_tag"))
    
    def sort_articles(self, primary):
        """Displays up to 10 articles name"""
        entry = self.textEdit.toPlainText().lower()

        if entry == "" and len(self.tag_list) == 0:
            messagebox.showinfo(primary.lang_file.get_page_text("reposting_page", "no_input"), primary.lang_file.get_page_text("reposting_page", "forgot_enter_text"))
            return

        if self.titleButton.isChecked():
            articles_list = []
            
            if len(self.tag_list) == 0 and entry != "":
                # search by title ONLY
                for dir in listdir(self.article_dir):
                    if entry in dir.lower() and len(articles_list) < 10:
                        articles_list.append(dir)        

            # search by tags
            if len(self.tag_list) > 0:
                tags_json = File("ressources/tags.json").get_dict()
                temp_articles_list = tags_json[self.tag_list[0]]
                final_articles_list = []
                for i in range(1, len(self.tag_list)):
                    for article in tags_json[self.tag_list[i]]:
                        if article in temp_articles_list:
                            final_articles_list.append(article)
                    temp_articles_list = final_articles_list
                
                if entry != "":
                    for article in temp_articles_list:
                        if entry in article.lower():
                            if len(articles_list) < 10:
                                articles_list.append(article)
                            else:
                                break
                else:
                    for article in temp_articles_list:
                        if len(articles_list) < 10:
                            articles_list.append(article)
                        else:
                            break

            # --- Update the list --- #            
            self.comboBox.clear()
            if len(articles_list) == 0:
                self.comboBox.addItem(primary.lang_file.get_page_text("reposting_page", "no_item_found"))
                return
            self.comboBox.addItems(articles_list)

        elif self.tagButton.isChecked():
            # search by tag
            messagebox.showinfo(primary.lang_file.get_page_text("reposting_page", "title_not_selected"), primary.lang_file.get_page_text("reposting_page", "forgot_uncheck_tag_box"))

    def add_tag(self, primary):
        """Adds a tag to the list"""
        if not self.tagButton.isChecked():
            messagebox.showinfo(primary.lang_file.get_page_text("reposting_page", "tag_not_selected"), primary.lang_file.get_page_text("reposting_page", "forgot_uncheck_title_box"))
            return

        # input of the user
        entry = self.textEdit.toPlainText().lower()

        if entry == "":
            messagebox.showinfo(primary.lang_file.get_page_text("reposting_page", "no_input"), primary.lang_file.get_page_text("reposting_page", "forgot_enter_tag"))
            return
        if entry not in File("ressources/tags.json").get_dict().keys():
            not_part_of_saved_tags = primary.lang_file.get_page_text("reposting_page", "not_part_of_saved_tags")
            messagebox.showerror(primary.lang_file.get_page_text("reposting_page", "unknown_tag"), f"{entry} {not_part_of_saved_tags}")
            return

        # Update the tag list for the research
        self.tag_list.append(entry)

        # Update the tag list
        if len(self.tag_list) == 1:
            tag_added_single = primary.lang_file.get_page_text("reposting_page", "tag_added_single")
            self.sortButton.setToolTip(f"<html><head/><body><p><span style=\" text-decoration: underline;\">{tag_added_single}</span></p><p>- {self.tag_list[0]}</p></body></html>")
        else:
            tags_html = ""
            for tag in self.tag_list:
                tags_html += f"<p>- {tag}</p>"
            tags_added_multiple = primary.lang_file.get_page_text("reposting_page", "tags_added_multiple")
            self.sortButton.setToolTip(f"<html><head/><body><p><span style=\" text-decoration: underline;\">{tags_added_multiple}</span></p>{tags_html}</body></html>")

        # reset the text entry
        self.textEdit.setText("")

    def reset_tag_list(self):
        """Resets the tag list"""
        self.tag_list = []
        self.sortButton.setToolTip("")
        
    def set_preview(self, article:str, primary):
        """Displays the article preview"""
        image_path = path.join(path.abspath(self.article_dir), f"{article}\\photos\\1.jpg")
        if path.exists(image_path):
            label_size = self.article_img.size()
            pixmap = QtGui.QPixmap(image_path)
            pixmap = pixmap.scaled(label_size, QtCore.Qt.AspectRatioMode.KeepAspectRatio, QtCore.Qt.TransformationMode.SmoothTransformation)
            self.article_img.setPixmap(pixmap)
        else:
            font = QtGui.QFont()
            font.setPointSize(17)
            self.article_img.setFont(font)
            self.article_img.setText(primary.lang_file.get_page_text("reposting_page", "no_art_slt"))

    def post_article(self, primary):
        """Posts an article on the Vinted account"""        
        article_name = self.comboBox.currentText()
        if article_name == primary.lang_file.get_page_text("reposting_page", "no_item_found"):
            messagebox.showinfo(primary.lang_file.get_page_text("reposting_page", "select_article"), primary.lang_file.get_page_text("reposting_page", "not_select_article_retry"))
            return
        
        continue_question = primary.lang_file.get_page_text("reposting_page", "continue_question")
        if len(self.queue) <= 1:
            about_to_upload = primary.lang_file.get_page_text("reposting_page", "about_to_upload")            
            if messagebox.askyesno(primary.lang_file.get_page_text("reposting_page", "upload_ad_vinted"), f"{about_to_upload} {article_name}. {continue_question}") == True:
                if primary.not_co_vinted():
                    return
                try:
                    # --- Get the infos from the database --- #            
                    infos_item = File(f"{self.article_dir}{article_name}/infos.json").get_dict()["item"]
                    primary.vinted_api.upload_item(infos_item, f"{self.article_dir}{article_name}/photos/")
                except:
                    primary.vinted_api.token_expired()
        else:
            articles_to_upload = "\n- ".join(self.queue)
            upload_queue = primary.lang_file.get_page_text("reposting_page", "upload_queue")
            upload_queue_desc = primary.lang_file.get_page_text("reposting_page", "upload_queue_desc")
            if messagebox.askyesno(upload_queue, f"{upload_queue_desc}\n- {articles_to_upload}\n\n{continue_question}") == True:
                if primary.not_co_vinted():
                    return
                try:
                    for article_name in self.queue:
                        # --- Get the infos from the database --- #            
                        infos_item = File(f"{self.article_dir}{article_name}/infos.json").get_dict()["item"]
                        primary.vinted_api.upload_item(infos_item, f"{self.article_dir}{article_name}/photos/", False)
                except:
                    primary.vinted_api.token_expired() 
    
    def add_to_queue(self, primary):
        """Adds an article to the queue"""
        article_name = self.comboBox.currentText()
        if article_name == primary.lang_file.get_page_text("reposting_page", "no_item_found"):
            messagebox.showinfo(primary.lang_file.get_page_text("reposting_page", "select_article"), primary.lang_file.get_page_text("reposting_page", "not_select_article_retry"))
            return
        
        if len(self.queue) == 20:
            messagebox.showwarning(primary.lang_file.get_page_text("reposting_page", "queue_len_reached_title"), primary.lang_file.get_page_text("reposting_page", "queue_len_reached_desc"))
            return

        # --- Update the queue --- #
        self.queue.append(article_name)
        list_articles = ""
        i = 0
        line = ""
        for article in self.queue:
            if i == 0:
                line += f"{article}"
                i += 1
            elif i <= 3:
                line += f"  - {article}"
                i += 1
            else:
                list_articles += line + "<br>"
                i = 0
                line = ""
        list_articles += line

        your_queue = primary.lang_file.get_page_text("reposting_page", "your_queue")
        self.add_to_queue_btn.setToolTip(
            f"<html><head/><body><p><span style=\" text-decoration: underline;\">{your_queue}</span></p></body></html>\n" \
            f"<html><pre>{list_articles}</pre></html>"
        )